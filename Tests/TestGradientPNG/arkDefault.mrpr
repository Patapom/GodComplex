
renderparm outside_local2WorldX { semantic float3 }
renderparm outside_local2WorldY { semantic float3 }
renderparm outside_local2WorldZ { semantic float3 }

renderparm hasDetailMap { option 0 }

renderProg arkBlend {
	newstyle
	
	parms {
		stageSort	sortTrans
	}
	state {
		blend	GL_SRC_ALPHA GL_ONE_MINUS_SRC_ALPHA
		depthmask
		//depthfunc GL_ALWAYS
	}
	hlsl_prefix {
		`include <vertex>
		`include <lighting>
	}
	hlsl_vp_main {
		#include <includes/arkVertex.inc>

		VertexInContext victx;
		INIT_VERTEXIN(victx)
		VertexOutContext vout = TransformVertex( victx );

		@sv_position = vout._projPosition;
		
		//@legacy_texcoord.x = dot( float3($vertex_texcoord.xy,1), $sMatrix.xyz );
		//@legacy_texcoord.y = dot( float3($vertex_texcoord.xy,1), $tMatrix.xyz );
		//@legacy_texcoord.zw = float2( 0.0f, 0.0f );
		@legacy_texcoord = float4( frac($vertex_texcoord.xy), 0.0f, 0.0f );
		
		//@wsPosition = vout._worldPosition;
		//@legacy_color = $color * $vertex_color;
	}
	hlsl_fp_main {
		@sv_target = $transMap.Sample( $trilinearSampler, $legacy_texcoord.xy );// * $legacy_color;
		@sv_target.rgb = pow(@sv_target.rgb, 2.2f);
	}
}

renderProg arkDefault {
	newstyle

	options {
	}
	parms {
		stageSort	sortCoverage
	}
	state {
		depthfunc	GL_LEQUAL
	}
	
	hlsl_prefix {
		`include <vertex>
		`include <lighting>
	}
	
	hlsl_vp_main {
		#include <includes/arkVertex.inc>

		VertexInContext victx;
		INIT_VERTEXIN(victx)
		VertexOutContext vout = TransformVertex( victx );
		
		@sv_position = vout._projPosition;
		`if $perforated || ( !$isShadow && !$isZPrePass )
			@legacy_texcoord = CalcTexcoords( $vertex_texcoord.xy ).xyxy;
			`if $hasDetailMap
				@legacy_texcoord1 = CalcTexcoords( $vertex_texcoord1.xy ).xyxy;
			`endif
		`endif

		`if !$isShadow && !$isZPrePass
			@wsPosition = vout._worldPosition;
			@outside_local2WorldX = vout._localToGlobalMat[0];
			@outside_local2WorldY = vout._localToGlobalMat[1];
			@outside_local2WorldZ = vout._localToGlobalMat[2];
			`if $useMultiInstancing
			    @(ward/NormalizedWorldMatX) = float4( normalize( vout._worldMat[0].xyz ), vout._worldMat[0].w );
			    @(ward/NormalizedWorldMatY) = float4( normalize( vout._worldMat[1].xyz ), vout._worldMat[1].w );
			    @(ward/NormalizedWorldMatZ) = float4( normalize( vout._worldMat[2].xyz ), vout._worldMat[2].w );
			`endif
		`endif
	}
	
	hlsl_fp_main {
		`if $isShadow || $isZPrePass
			`if $perforated && $hasCoverMap
				float alpha = $covermap.Sample( $anisotropicSampler, $legacy_texcoord.xy ).r; 
				clip( alpha - 0.5 );
			`elif $perforated
				float alpha = $diffusemap.Sample( $anisotropicSampler, $legacy_texcoord.xy ).a; 
				clip( alpha - 0.5 );
			`endif
			@sv_target = 1.0f;
		`else
			float4 albedo = $diffusemap.Sample( $anisotropicSampler, $legacy_texcoord.xy ); 
			`if $hasCoverMap
				albedo.a = $covermap.Sample( $anisotropicSampler, $legacy_texcoord.xy ).r; 
			`endif
			`if $hasDetailMap
				float4 albedo2 = $Alt_diffusemap.Sample( $anisotropicSampler, $legacy_texcoord1.xy );
				albedo.rgb = albedo.rgb * ( 1.f - albedo2.a ) + ( albedo2.rgb * albedo2.a );
			`endif
			
			`if $perforated
				clip( albedo.a - 0.5 );
			`endif
			
			`if $hasBumpMap
				float2 rawTsNormal = $bumpmap.Sample( $anisotropicSampler, $legacy_texcoord.xy ).rg;
				float3 tsNormal = UnpackBC5NormalMap( rawTsNormal );
				`if $hasDetailMap
					float2 rawTsNormal2 = $Alt_bumpmap.Sample( $anisotropicSampler, $legacy_texcoord1.xy ).rg;
					float3 tsNormal2 = UnpackBC5NormalMap( rawTsNormal2 );
					tsNormal.xyz = tsNormal.xyz * ( 1.f - albedo2.a ) + ( tsNormal2.xyz * albedo2.a );
				`endif
				
			`else
				float3 tsNormal = float3( 0, 0, 1 );
			`endif
			
			`if $twoSidedLighting
				tsNormal.z *= float( $sv_isFrontFace ) * 2 - 1; // flip normal on backface
			`endif
			
			`if $hasSpecularMap
				float4 specular = $specularmap.Sample( $anisotropicSampler, $legacy_texcoord.xy );
				`if $hasDetailMap
					float4 specular2 = $Alt_specularmap.Sample( $anisotropicSampler, $legacy_texcoord1.xy );
					specular = specular * ( 1.f - albedo2.a ) + ( specular2 * albedo2.a );
				`endif
			`else
				float4 specular = albedo;
			`endif
			
			float3 wsNormal = TransformTangentSpaceNormalToWorldSpace( tsNormal
														, normalize( $outside_local2WorldX )
														, normalize( $outside_local2WorldY )
														, normalize( $outside_local2WorldZ ));


			float2 pixelAddress = $sv_position.xy;

			`if $useMultiInstancing
			    float3x4 worldMat = float3x4( $(ward/NormalizedWorldMatX), $(ward/NormalizedWorldMatY), $(ward/NormalizedWorldMatZ) );
			`else
				float3x4 worldMat = float3x4( $modelMatrixX, $modelMatrixY, $modelMatrixZ);
				for( uint axis = 0; axis < 3; ++axis ) {			
					worldMat[axis].xyz = normalize( worldMat[axis].xyz );
				}
			`endif
			
			ComputeLightingContext clctx;
			clctx.pixelAddr_   = pixelAddress.xy;
			clctx.worldMat_    = worldMat;
			clctx.wsPos_      = $wsPosition.xyz;
			clctx.wsCamPos_    = $globalViewOrigin.xyz;
			clctx.albedo_      = albedo.rgb;
			clctx.specular_     = specular.rgb;
			clctx.wardRoughness_ = $wardRoughness.xy;
			clctx.wsNormal_      = wsNormal;
			
			@sv_target.xyz = ComputeLighting( clctx );
			
			`if $hasDetailMap
				if($alwaysOne) {
//					@sv_target.xyz = float3($legacy_texcoord1.xy,0);
				}
			`endif
			@sv_target.w = albedo.w;

			`if $useModulateColor
				@sv_target *= $color;
				// @sv_target.rgb = pow( @sv_target.rgb, 1.f /2.2f ); // cam window gamma space
			`endif
		`endif
	}
}

renderParm Alt_bumpMap			{ Texture2D	float4	constantColor(0.5,0.5,0,0) }
renderParm Alt_diffuseMap		{ Texture2D	float4	_default }
renderParm Alt_specularMap		{ Texture2D	float4	constantColor(0,0,0,0) }
renderParm maskmap				{ Texture2D	float	_default }
renderparm Alt_wardRoughness	{ Uniform float4 { 0.3, 0.3, 0, 0 } persist range [{0.0001, 0.0001, 0, 0},{1, 1, 0, 0}] }

renderProg arkMaskedBlend {
	newstyle

	options {
	}
	parms {
		stageSort	sortCoverage
	}
	state {
		depthfunc	GL_LEQUAL
	}
	
	hlsl_prefix {
		`include <vertex>
		`include <lighting>
	}
	
	hlsl_vp_main {
		#include <includes/arkVertex.inc>

		VertexInContext victx;
		INIT_VERTEXIN(victx)
		VertexOutContext vout = TransformVertex( victx );
		
		@sv_position = vout._projPosition;
		`if $perforated || ( !$isShadow && !$isZPrePass )
			@legacy_texcoord = CalcTexcoords( $vertex_texcoord.xy ).xyxy;
		`endif

		`if !$isShadow && !$isZPrePass
			@wsPosition = vout._worldPosition;
			@outside_local2WorldX = vout._localToGlobalMat[0];
			@outside_local2WorldY = vout._localToGlobalMat[1];
			@outside_local2WorldZ = vout._localToGlobalMat[2];
			`if $useMultiInstancing
			    @(ward/NormalizedWorldMatX) = float4( normalize( vout._worldMat[0].xyz ), vout._worldMat[0].w );
			    @(ward/NormalizedWorldMatY) = float4( normalize( vout._worldMat[1].xyz ), vout._worldMat[1].w );
			    @(ward/NormalizedWorldMatZ) = float4( normalize( vout._worldMat[2].xyz ), vout._worldMat[2].w );
			`endif
		`endif
	}
	
	hlsl_fp_main {

		float mask = 0.0;
		`if $isShadow || $isZPrePass
			`if $perforated
				mask = $maskmap.Sample( $anisotropicSampler, $legacy_texcoord.xy ).r; 
				float alpha = $diffusemap.Sample( $anisotropicSampler, $legacy_texcoord.xy ).a; 
				float Alt_alpha = $Alt_diffusemap.Sample( $anisotropicSampler, $legacy_texcoord.xy ).a; 
				clip( mask*alpha + (1.0f-mask)*Alt_alpha - 0.5 );
			`endif
			@sv_target = 1.0f;
		`else
			mask = $maskmap.Sample( $anisotropicSampler, $legacy_texcoord.xy ).r; 
			float4 albedo = mask * $diffusemap.Sample( $anisotropicSampler, $legacy_texcoord.xy ); 
			albedo += (1.0f-mask) * $Alt_diffusemap.Sample( $anisotropicSampler, $legacy_texcoord.xy ); 
			
			`if $perforated
				clip( albedo.a - 0.5 );
			`endif
			
			`if $hasBumpMap
				float2 rawTsNormal = mask * $bumpmap.Sample( $anisotropicSampler, $legacy_texcoord.xy ).rg;
				rawTsNormal += (1.0f-mask) * $Alt_bumpmap.Sample( $anisotropicSampler, $legacy_texcoord.xy ).rg;
				float3 tsNormal = UnpackBC5NormalMap( rawTsNormal );
			`else
				float3 tsNormal = float3( 0, 0, 1 );
			`endif
			
			`if $hasSpecularMap
				float4 specular =  mask * $specularmap.Sample( $anisotropicSampler, $legacy_texcoord.xy );
				specular += (1.0f-mask) * $Alt_specularmap.Sample( $anisotropicSampler, $legacy_texcoord.xy );
			`else
				float4 specular = albedo;
			`endif
			
			float3 wsNormal = TransformTangentSpaceNormalToWorldSpace( tsNormal
														, normalize( $outside_local2WorldX )
														, normalize( $outside_local2WorldY )
														, normalize( $outside_local2WorldZ ));


			float2 pixelAddress = $sv_position.xy;

			`if $useMultiInstancing
			    float3x4 worldMat = float3x4( $(ward/NormalizedWorldMatX), $(ward/NormalizedWorldMatY), $(ward/NormalizedWorldMatZ) );
			`else
				float3x4 worldMat = float3x4( $modelMatrixX, $modelMatrixY, $modelMatrixZ);
				for( uint axis = 0; axis < 3; ++axis ) {			
					worldMat[axis].xyz = normalize( worldMat[axis].xyz );
				}
			`endif
			
			@sv_target.xyz = ComputeLighting( pixelAddress, worldMat, $wsPosition.xyz, wsNormal, $globalViewOrigin.xyz, albedo, specular, mask * $wardRoughness.xy +  (1.0f-mask) * $Alt_wardRoughness.xy);
			@sv_target.w = albedo.w;

			`if $useModulateColor
				@sv_target *= $color;
			`endif
		`endif
	}
}
