renderparm wardRoughness	{ Uniform float4 { 0.3, 0.3, 0, 0 } persist range [{0.0001, 0.0001, 0, 0},{1, 1, 0, 0}] }
renderparm wardFresnel		{ Uniform float 0.04 persist range [0.0, 1.0] }

// used to store the world matrix from vs to ps ( with multi instancing )
// needs by the ward context creation
renderparm ward/NormalizedWorldMatX { Semantic float4 }
renderparm ward/NormalizedWorldMatY { Semantic float4 }
renderparm ward/NormalizedWorldMatZ { Semantic float4 }

// ARKANE: bmayaux (2013-10-07) Now accounting for Fresnel reflectance so we can never have diffuse + specular > 1
renderparm wardEnableFresnel	{ option 1 }

renderprog ward {
	newstyle
	hlsl_prefix {
		float pow2( float val) { return val * val; }
		float pow4( float val) { return val * val * val * val; }

		struct WardContext {
			float3 viewDir_;
			`if $(piss/enable)
				float3 wsNormal_[4];
			`else
				float3 wsNormal_;
			`endif
			
			float3 anisoTangentDivRoughness_;
			float3 anisoBitangentDivRoughness_;
			float3 specularNormalization_;
			float  diffuseRoughness_;		// ARKANE: bmayaux (2013-10-14) Disney diffuse roughness Fresnel term
			
			// result
			float3 diffuseAccum_;
			float3 specularAccum_;
		};
		#define C_PI float(3.141592653589793238462643383279f)

		// primary axis orthoghonal to secondary axis so if cross(n,pa) == 0 then cross(n,sa) != 0
		// pa is world.i and sa is world.k
		// worldmat requires axis normalized in the vertex shader prior to interpolator assign
		`if $(piss/enable)
			WardContext CreateWardContext( float2 roughness, float3x4 worldMat, float3 normal[4], float3 viewDir)
		`else
			WardContext CreateWardContext( float2 roughness, float3x4 worldMat, float3 normal, float3 viewDir)
		`endif
		{ // keep the brace here because of parsing counting unsync because of an an unevaluated context 
			roughness += float2( 0.00001f/*1e-5f*/, 0.00001f/*1e-5f*/ ); // prevent div by zero
			float2 invRoughness = 1.f / roughness;

			WardContext ctx;
			
			ctx.viewDir_ = viewDir;			
			ctx.wsNormal_ = normal;
			
			`if $(piss/enable)
				float3 wsSpecNorm = ctx.wsNormal_[3];
			`else
				float3 wsSpecNorm = ctx.wsNormal_;
			`endif

			// the normalize on the world matrix axis should be replaced by a product with a uniform float3 that store the reciprocals of the vector lengths
			ctx.anisoTangentDivRoughness_ = cross( wsSpecNorm, /*normalize*/(worldMat[2].xyz) );
			float sqLen = dot( ctx.anisoTangentDivRoughness_, ctx.anisoTangentDivRoughness_ );
			if ( sqLen< 0.001f/*1e-4*/ ) {
				ctx.anisoTangentDivRoughness_	= /*normalize*/( worldMat[0].xyz );
				ctx.anisoBitangentDivRoughness_	= /*normalize*/( worldMat[1].xyz );
			}
			else {
				ctx.anisoTangentDivRoughness_	= normalize( ctx.anisoTangentDivRoughness_ );
				ctx.anisoBitangentDivRoughness_	= normalize( cross( wsSpecNorm, ctx.anisoTangentDivRoughness_ ) );
			}
			
			// pre mul by roughness
			ctx.anisoTangentDivRoughness_ *= invRoughness.x;
			ctx.anisoBitangentDivRoughness_ *= invRoughness.y;
			
			// ARKANE: bmayaux (2013-10-14) Disney diffuse roughness Fresnel term
			ctx.diffuseRoughness_ = saturate( roughness.x + roughness.y - 1.0 );	// Diffuse roughness starts increasing for ward roughness > 0.5 and reaches 1 for ward roughness = 1

//ctx.diffuseRoughness_ = 1.0;//###


			ctx.specularNormalization_ = ( 1.f / C_PI ) * invRoughness.x * invRoughness.y;
			ctx.diffuseAccum_ = ctx.specularAccum_ = 0;
			return ctx;
		}
		
		void AddLightToWard( inout WardContext ctx, float3 lightCol, float3 lightDir, float shadow, float curv = 0.f ) {
			if( shadow < 0.00000001f ) {
				return;
			}
			
			float3 halfWay = lightDir + ctx.viewDir_; 
			//halfWay = normalize(halfWay); // not normalized on purpose, HdotH would be 1 if normalized, nonsense
			
			`if $(piss/enable)
				float3 wsSpecNorm = ctx.wsNormal_[3];
			`else
				float3 wsSpecNorm = ctx.wsNormal_;
			`endif
			
			float HdotN = dot( halfWay, wsSpecNorm );
			HdotN = max( 0.0001f /*1e-4f*/, HdotN );
			float invHdotN_2 = 1.f / pow2( HdotN );
			float invHdotN_4 = pow2( invHdotN_2 );
			
			float HdotT = dot( halfWay, ctx.anisoTangentDivRoughness_ );
			float HdotB = dot( halfWay, ctx.anisoBitangentDivRoughness_ );
			float HdotH = dot( halfWay, halfWay );
			
			float exponent = -invHdotN_2;
			exponent *= pow2( HdotT ) + pow2( HdotB ) ;
			
			// ARKANE: bmayaux (2013-10-07) Now accounting for Fresnel reflectance so we can never have diffuse + specular > 1
			float	Fresnel_diffuse = 1.0;
			float	Fresnel_specular = 1.0;

`if $wardEnableFresnel

			// Using simplified Shlick Fresnel: F(L.H) = Rs + (1-Rs).(L.H)^5
			{
				float	LdotH = dot( lightDir, normalize(halfWay) );	// = cos(theta_d) where theta_d is the angle between light/view and half vector
				float	CompLdotH = 1.0 - LdotH;
				float	CompLdotH2 = pow2( CompLdotH );
				float	CompLdotH5 = CompLdotH * pow2( CompLdotH2 );

				float	F0 = $wardFresnel; 

				Fresnel_specular = F0 + (1.0-F0) * CompLdotH5;
//Fresnel_specular = 0.0;//###

#if 0
				// Simple Fresnel term
				Fresnel_diffuse = 1.0 - Fresnel_specular;	// Simplest model of all: the diffuse only gets what has not been specularly reflected...
#else

				// More complex Fresnel with roughness from Disney (cf. §5.3 of http://disney-animation.s3.amazonaws.com/library/s2012_pbs_disney_brdf_notes_v2.pdf)
				float	cosThetaD = LdotH;
				float	diffuseRoughness = ctx.diffuseRoughness_;
//diffuseRoughness = 2.0;//###

				float	compCosThetaL = 1.0 - saturate( dot( wsSpecNorm, lightDir ) );			// 1 - cos(theta_l)
				float	compCosThetaV = 1.0 - saturate( dot( wsSpecNorm, ctx.viewDir_ ) );		// 1 - cos(theta_v)
				float	Fd90_minus_1 = 0.5 + diffuseRoughness * cosThetaD*cosThetaD - 1.0;

				float	compCosThetaL5 = compCosThetaL*compCosThetaL;	// ^2
						compCosThetaL5 *= compCosThetaL5;				// ^4
						compCosThetaL5 *= compCosThetaL;				// ^5

				float	compCosThetaV5 = compCosThetaV*compCosThetaV;	// ^2
						compCosThetaV5 *= compCosThetaV5;				// ^4
						compCosThetaV5 *= compCosThetaV;				// ^5

				Fresnel_diffuse = (1.0 + Fd90_minus_1 * compCosThetaL5) * (1.0 + Fd90_minus_1 * compCosThetaV5);

if ( !$alwaysOne ) {
//	ctx.diffuseAccum_ = compCosThetaL;
//	ctx.diffuseAccum_ = pow( compCosThetaV, 5.0 );
//	ctx.diffuseAccum_ = (1.0 + Fd90_minus_1 * compCosThetaL5);
//	ctx.diffuseAccum_ = 100.0 * abs( cosThetaD - dot( ctx.viewDir_, normalize(halfWay) ) );	// Check L.H == V.H
//	ctx.diffuseAccum_ = 0.5 + diffuseRoughness * cosThetaD*cosThetaD - 1.0;
//	ctx.specularAccum_ = 0.0;
//	return;

Fresnel_specular = 0.0;

}// if($alwaysOne)

#endif

			}
`endif

			float3 shadowLight = lightCol * shadow;
			`if $(piss/enable)
				float LDotNs[4];
				for ( uint c = 0; c != 4; ++c ) {
					LDotNs[c] = dot( lightDir, ctx.wsNormal_[c] );
				}
				LDotNs[3] = saturate( LDotNs[3] );
				//LDotNs[3] = max( 0, LDotNs[3] );
				
				float skinr = $(piss/skinlut).SampleLevel( $bilinearClamp, float2( LDotNs[0] * 0.5 + 0.5, curv ), 0  ).r;
				float sking = $(piss/skinlut).SampleLevel( $bilinearClamp, float2( LDotNs[1] * 0.5 + 0.5, curv ), 0  ).g;
				float skinb = $(piss/skinlut).SampleLevel( $bilinearClamp, float2( LDotNs[2] * 0.5 + 0.5, curv ), 0  ).b;
				
				ctx.diffuseAccum_  += Fresnel_diffuse * shadowLight * float3( skinr, sking, skinb );
				ctx.specularAccum_ += Fresnel_specular * shadowLight * LDotNs[3] * exp( exponent ) * HdotH * invHdotN_4;
			`else
				float LdotN = saturate( dot( lightDir, ctx.wsNormal_ ) );
				//float LdotN = max( 0, dot( lightDir, ctx.wsNormal_ ) );
				ctx.diffuseAccum_  += Fresnel_diffuse * shadowLight * LdotN;
				ctx.specularAccum_ += Fresnel_specular * shadowLight * LdotN * exp( exponent ) * HdotH * invHdotN_4;
			`endif
		}
		
		float3 FinalizeWardColor( WardContext ctx, float3 Kd, float3 Ks ) {
			return Kd * ctx.diffuseAccum_ + Ks * ctx.specularAccum_ * ctx.specularNormalization_;
		}
		
		void InvalidateWardResult( inout WardContext ctx ) {
			ctx.diffuseAccum_ = float3(1,1,0);
			ctx.specularAccum_ = float3(0,0,0);
		}
					
		float3 FinalizeWardDiffuseOnly( WardContext ctx, float3 Kd, float3 Ks ) {
			return Kd * ctx.diffuseAccum_;
		}

		float3 FinalizeWardSpecularOnly( WardContext ctx, float3 Kd, float3 Ks ) {
			return Ks * ctx.specularAccum_ * ctx.specularNormalization_;
		}
	}
}
