// ARKANE: bmayaux (2013-09-24) Low and High ambient reflectance
// Actual ambient term will be mixed depending on normals orientation:
//	env_ambient_low will be used when the normal faces down
//	env_ambient_high will be used when the normal faces up
//
renderParm env_ambient_low	{ uniform float3 0.01 }
renderParm env_ambient_high	{ uniform float3 0.04 }

renderprog lighting {
	newstyle
	hlsl_prefix {
		`include <ward>
		`include <shadow>
		`include <atm/common>	// ARKANE: bmayaux (2013-05-13) Now using the atmosphere renderer!
						
		float2 ConvertToDerivativeNormalMap( float3 _tsNormal )
		{
			return _tsNormal.xy / _tsNormal.z;
		}
		
		// this is for signed BC5
		float3 UnpackBC5NormalMap( float2 _bc5Normal ) {
			float3 n;
			n.xy = _bc5Normal;
			n.z = 1.0f - dot( n.xy, n.xy );
			return normalize(n);
		}
	
		float3 TransformTangentSpaceNormalToWorldSpace( float3 _tsNormal, float3 _localToGlobalX, float3 _localToGlobalY, float3 _localToGlobalZ )
		{
			float3 globalNormal;
			globalNormal.x = dot( _tsNormal, _localToGlobalX );
			globalNormal.y = dot( _tsNormal, _localToGlobalY );
			globalNormal.z = dot( _tsNormal, _localToGlobalZ );
			globalNormal = normalize( globalNormal );
			return globalNormal;		
		}
		
		struct ComputeLightingContext {
			uint2 pixelAddr_;
			float3x4 worldMat_;
			float3 wsPos_;
			float3 wsCamPos_;
			
			float3 albedo_;
			float3 specular_;
			
			float2 wardRoughness_;
			
			`if $(piss/enable)
				float3 wsNormal_[4]; // red green blue spec
				float curvature_;
				float Curvature() { return curvature_; }
			`else
				float3 wsNormal_;
				float Curvature() { return 0.f; }
			`endif
		};
		
		float3 ComputeLighting( in ComputeLightingContext ctx ) {
			float3 wsEyeDir = normalize( ctx.wsCamPos_ - ctx.wsPos_ );
			
			WardContext wardCtx = CreateWardContext( ctx.wardRoughness_, ctx.worldMat_, ctx.wsNormal_, wsEyeDir );
			
			// start with parallel light
			float parallelShadow = 1.0f;
			if ( $parallelLightHasShadow ) {
				float4 wsPos = float4( ctx.wsPos_, 1.f );
				float4 shadowCoords;
				shadowCoords.x = dot( $shadowProjectionS, wsPos );
				shadowCoords.y = dot( $shadowProjectionT, wsPos );
				shadowCoords.z = dot( $shadowProjectionR, wsPos );
				shadowCoords.w = dot( $shadowProjectionQ, wsPos );
				float viewZ = -dot( $viewMatrixZ, wsPos );
				parallelShadow = SampleDirectionalShadowMap( shadowCoords, viewZ );
			}
			
			float	AltitudeKm = $(atm/sky/World2Kilometer).x * ctx.wsPos_.z;

//			float	CloudTransmittance = GetFastCloudShadowing();	// TODO!
			float	CloudTransmittance = 1.0;
			parallelShadow *= CloudTransmittance;

			// Account for Earth shadow
			parallelShadow *= ComputeEarthShadowing( AltitudeKm, $(atm/sky/SunDirection).z );
			
			AddLightToWard( wardCtx, $parallelLightColor.xyz, $parallelLightDir.xyz, parallelShadow, ctx.Curvature()  );
			
			// iterate over the lights
			uint stop = 0;
			uint current = $(tlf/ll/heads)[ ctx.pixelAddr_ >> $(tlf/tileDimForLighting) ];
			while( current != 0xFFFFFFFF) {
				$(tlf/ll/node_t) node = $(tlf/ll/pool)[current];
				$(tlf/light_t) light  = $(tlf/lights)[node.mLightIndex];
				
				float3 dir = light.mWorldPosition - ctx.wsPos_;
				float invdelta = 1.f / length(dir);
				float3 ndir = dir * invdelta;
				
				float li = (1.f-saturate(1.f/(light.mRadius*invdelta)));
				li *= li;
				
				float spotAttn = 1 - saturate( dot( ndir, light.mSpotDir ) * light.mSpotParms.x + light.mSpotParms.y );
				li *= spotAttn;
				
				//Compute shadows
				//---------------
				float shadow = 1.0f;
				if ( (light.mShadowSetup != 0xFFFFFFFF) && (li > 0.0001f) ) {
					uint slice = light.mShadowSetup;
					if( SHADOW_LIGHT_TYPE( $(tlf/shadows)[ slice ].mInfo ) == LIGHT_TYPE_POINT ) {
						slice += OmniShadowMapSliceOffset( ctx.wsPos_, dir );
					}
					shadow = SampleSpotShadowMap( slice, ctx.wsPos_ );
				}
				//wardCtx.diffuseAccum_ += 0.1;
				AddLightToWard( wardCtx, light.mColor * li, ndir, shadow, ctx.Curvature() );
				
				if ( stop++ > 32 ) {
					InvalidateWardResult( wardCtx );					
					break;
				}	
				current = node.mNext;
			}
			
			float3 ward = FinalizeWardColor( wardCtx, INVPI * ctx.albedo_, INVPI * ctx.specular_ );

			//////////////////////////////////////////////////////////////////////////////
			// Add ambient term
			float AO = $(SSAO/aoBuffer)[ ctx.pixelAddr_ ].x;
			
			`if $(piss/enable)
				float3 wsNormalForIrradiance = ctx.wsNormal_[3];
			`else
				float3 wsNormalForIrradiance = ctx.wsNormal_;
			`endif
			

			// ARKANE: bmayaux (2013-05-13) Sky color is now computed by the atmosphere renderer
			float3 SkyIrradiance = $(atm/sky/SunIntensity).x * GetIrradiance( AltitudeKm, normalize( $parallelLightDir.xyz + wsNormalForIrradiance ).z );	// Lighting by multiple-scattered light (use half angle with normal to avoid too dark colors)

			// Slight attenuation due to normal orientation
			float3 SkyIrradianceConstant = lerp( $env_ambient_low, $env_ambient_high, saturate( 0.5 + 0.5 * wsNormalForIrradiance.z ) );	// Single ambient global for all frame (This is equivalent to the computation that was done in the old version)
			SkyIrradiance = lerp( SkyIrradianceConstant, SkyIrradiance, saturate( $(atm/sky/SunIntensity).x ) );				// When the atmosphere is disabled, sun intensity is 0 in which case we revert back to the usual constant ambient term

 			//### HARDCODED Graying & attenuation of irradiance when in cloud shadow => Make that a parameter!
			SkyIrradiance = lerp( 0.8 * dot( SkyIrradiance, LUMINANCE ).xxx, SkyIrradiance, parallelShadow );					// Make the ambient sky color become gray when in shadow

			ward += AO * SkyIrradiance * ( INVPI * ctx.albedo_.xyz );
			
			return ward;
		}
	}
}
