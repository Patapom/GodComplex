#include"Inc/Global.hlsl"
static const float2 dUV=1./TARGET_SIZE;cbuffer cbDiffusion:register( b10){float _BBoxSize;float _SliceThickness;float _TexelSize;float3 _ExtinctionCoeff;float3 _Albedo;float3 _Phase0,_Phase1,_Phase2;float3 _ExternalLight;float3 _InternalEmissive;};cbuffer cbPass:register( b11){float _PassIndex;float _CurrentZ;float _NextZ;};Texture2D _TexZBuffer:register(t10),_TexIrradiance:register(t11);struct VS_IN{float4 __Position:SV_POSITION;};VS_IN VS(VS_IN f){return f;}float3 f(float2 f,float2 c,float3 x){float3 V=TEXLOD(_TexIrradiance,LinearMirror,f+c*dUV,0.).xyz,d=1.;return x*d*V;}float4 PS(VS_IN x):SV_TARGET0{float2 V=x.__Position.xy*dUV;float4 c=TEXLOD(_TexZBuffer,LinearClamp,V,0.);clip(_NextZ-c.x);clip(c.y-_CurrentZ);if(_CurrentZ<=c.x){float3 d=float3(2.*V-1.,_CurrentZ),t=float3(d.xy,1.-d.z),L=float3(0.,0.,4.),Z=normalize(L-d);float b=saturate(dot(t,Z));return float4(b*_ExternalLight,0.);}if(_CurrentZ>c.z&&_CurrentZ<c.w)return float4(_InternalEmissive,0.f);float3 d=exp(-_ExtinctionCoeff*_SliceThickness),r=0.;r+=f(V,float2(-1,-1),_Phase1);r+=f(V,float2(0,-1),_Phase1);r+=f(V,float2(1,-1),_Phase1);r+=f(V,float2(-1,0),_Phase1);r+=f(V,float2(0,0),_Phase0);r+=f(V,float2(1,0),_Phase1);r+=f(V,float2(-1,1),_Phase1);r+=f(V,float2(0,1),_Phase1);r+=f(V,float2(1,1),_Phase1);r+=f(V,float2(-1,-2),_Phase2);r+=f(V,float2(0,-2),_Phase2);r+=f(V,float2(1,-2),_Phase2);r+=f(V,float2(-2,-1),_Phase2);r+=f(V,float2(2,-1),_Phase2);r+=f(V,float2(-2,0),_Phase2);r+=f(V,float2(2,0),_Phase2);r+=f(V,float2(-2,1),_Phase2);r+=f(V,float2(2,1),_Phase2);r+=f(V,float2(-1,2),_Phase2);r+=f(V,float2(0,2),_Phase2);r+=f(V,float2(1,2),_Phase2);return float4(d*r,0.);}