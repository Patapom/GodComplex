 This log contains the history of exe sizes
--------------------------------------------

 [26 may 2012]
. First version with working shader
	packed executable 97280 -> 20992 bytes

 [26 may 2012]
. Added static gs_Noise instance + Noise code
	packed executable 97280 -> 21504 bytes


 [27 may 2012]
. Added default samplers to the Device
. Moved default states to the Device
. Added the TextureBuilder class that fills up a Texture2D and constructs its mip maps
. Tested a noise texture
. Tested constant buffers
	packed executable 100864 -> 23040 bytes (Added 1.5Kb!!)

 [27 may 2012]
. Fixed stupid ass non-normalized gradient vectors in noise
 	packed executable 102400 -> 23552 bytes (Increase due to more noise tables !)

 [27 may 2012]
. Added draw utilities
	packed executable 104448 -> 24576 bytes (Rhaaa! WTH? Did I really write 4Kb of code??)

 [28 may 2012]
. Optimized/Changed draw utilities
	packed executable 103936 -> 24064 bytes (whoohoo!)

 [28 may 2012]
. Upgraded and generalized the drawing utility to draw a generic convex quad
	packed executable 105984 -> 25088 bytes

 [28 may 2012]
. Added ellipse drawing
	packed executable 106496 -> 25600 bytes

 [28 may 2012]
. Added gaussian blur filter
	packed executable 110080 -> 26624 bytes

 [29 may 2012]
. Added cellular & Worley noise
	packed executable 108544 -> 26112 bytes (passed a lot of code into functions and also removed inlines. That might explain why it's smaller)

 [29 may 2012]
. Added wavelet noise
. Added noise algorithms
	packed executable 110080 -> 26624 bytes

 [31 may 2012]
. Added filters
. Added fillers
	packed executable 112128 -> 27648 bytes

 [3 june 2012]
. Added dilate/erode (slow!) filters
. Added the modified "Marble" generator from Pierre
	packed executable 112640 -> 27648 bytes

 [9 june 2012]
. Geometry builders
. First display test with a magnificent sphere rendered into an offscreen buffer and showing its normals
. Added tweakable values (only compiles in DEBUG !)
	packed executable 117760 -> 29696 bytes

 [9 june 2012]
. Added Vertex Tweaking callback in Geometry builders
	packed executable 118784 -> 30208 bytes

 [11 june 2012]
. Added torus geometry builder
. Finished a first version of the diffuse scattering effect with blocker
	packed executable 125952 -> 32256 bytes

 [17 june 2012]
. Build default wrapping 3D noise texture
. Re-organized constant buffers/textures
. Added dynamic vertex noise distortion
	packed executable 136192 -> 34816 bytes

 [23 june 2012]
. Merged changes from NuajSDK
. Added support for dynamic shader reloading when changed on disk
	packed executable 136192 -> 34816 bytes


------------------------------------------------------------------
-- After a long pause because of Nuaj' development for Ubi Soft --

 [7 november 2012]
. Added hull, domain and compute shaders
. Coded a fast global illumination compute shader to render our main room
. Refactored the DrawUtils and TextureBuilder to support "FAT PIXELS"
	=> The idea is simply to have additional fields than the usual RGBA color for a pixel
	=> For example, I added geometric fields like the height and roughness of a pixel
	  --> This gracefully handles the fact that, now, textures also have geometric informations tied to each pixel
	  --> This allows us to easily create the normal map, the height map (obviously), the specular map and the ambient occlusion map but we can think about other maps as well like curvature, gradient or dirt maps...
	  --> With the help of the height field, we can also start writing funny filters like erosion, dirtiness, terrace, and the usual stuff from terrain generation...

	packed executable 157184 -> 40960 bytes (+6144 bytes !!!!!)

 [8 november 2012]
. Added support for binary embedded shader resources
 => There is a significant 512 bytes gain compared to minified text shaders (although it yields the same size as yesterday but I believe the size increase "per block", let's see on the long run!)
	packed executable 170496 -> 40960 bytes

 [10 november 2012]
. Generate my first "fat texture"
 => A white rounded rectangle with tapered borders
. This texture is used by the light maps computer to influence the local frame for rays
 => Nice "rounded" look on the borders !
 => It's just awesome how the system is flexible => I use the original wall TextureBuilder (containing only fat pixels) and ask the builder to convert the fat pixels into a normal map of the appropriate size (i.e. the size of my light maps). All this in 2 lines of code!
. Modified the "Sample()" and "Get()" functions on the TextureBuilder to sample mips
. Modified the "CopyFrom()" function to make it sample from the appropriate mip level if the source & target sizes mismatch by a factor>2
	packed executable 173568 -> 41984 bytes
